@import '../../lib';

@mixin button ($buttonMap) {
  background: map-get($buttonMap, background);
  border: map-get($buttonMap, border);
  border-width: map-get($buttonMap, border-width);
  color:  map-get($buttonMap, color);
  
  $hoverMap: map-get($buttonMap, hover) ;
  &:hover {
    background: map-get($hoverMap, background);
    border: map-get($hoverMap, border);
    border-width: map-get($hoverMap, border-width);
    color:  map-get($hoverMap, color);
  }
  $activeMap: map-get($buttonMap, active) ;
  &:active {
    background: map-get($activeMap, background);
    border: map-get($activeMap, border);
    border-width: map-get($activeMap, border-width);
    color:  map-get($activeMap, color);
  }
}

.Button {
  @include font-size(epsilon); 
  @include button($base-button);
  @include transition( map-get($base, transition-time));
  display: inline-block;
  position: relative;
  border-radius: $base-button-radius;
  cursor: pointer;
  margin: 1rem 0;
  padding: 0 $spacing-delta;
  line-height: 3; // ????
  text-align: center;
  text-transform: uppercase;
  width: auto;
  &__icon {
    display: inline-block;
    position: relative;
    fill: get-color(white);
    //width: 1rem;
    //height: 100%;
    transform: translateY(25%); // centers svg vertically
  }
  &--icon {
    padding-left: $spacing-gamma;
    &-right {
      padding-left: $spacing-delta;
      padding-right: $spacing-gamma;
    }
    svg {
      position: absolute;
      left: $spacing-epsilon;
    }
  }
  &--pill {
    border-radius: 100px;
  }
  &--full {
    width: 100%;
  }
  // SIZES
  &--zeta {
    @include font-size(zeta);
  }
  &--epsilon {
    @include font-size(epsilon);
  }
  &--gamma {
    @include font-size(gamma);
  }
  &--delta {
    @include font-size(delta);
  }
  &--beta {
    @include font-size(beta);
  }
  &--alpha {
    @include font-size(alpha);
  }
  // DISABLED
  &.disabled,
  &[disabled],
  &[disabled="disabled"] {
    @include button($disabled-button);
    cursor: pointer;
  }

  // TRUTHY/CORRECT
  &--true {
    @include button($truthy-button);
  }
  // WARN
  &--warn {
    @include button($warn-button);
  }
  // FLASEY/INCORRECT
  &--false {
    @include button($falsey-button);
  }

  // STYLE VARIATIONS
  &--link {
    @include base-link-style();
    @include font-size(delta);
    padding: 0;
    margin: 0;
    border: 0;
    background: transparent;
    color: map-get($base, link-color);
    text-transform: none;
    line-height: 1rem;
    
    &:hover {
      background: transparent;
      border: 0;
      color: map-get($base, link-color--hover);
    }
    &:active {
      background: transparent;
      border: 0;
      color: map-get($base, link-color--hover);
    }
  }
  // OUTLINED BUTTON
  &--outline {
    border: solid  get-color( alpha,null, dark, map-get($base, shade) );
    border-width: 1px 1px 3px 1px;
    background: none;
    color:  $_alpha-dark;
    &:hover {
      background: none;
      border: get-color(alpha);
      border-width: 1px 1px 3px 1px;
      color:  get-color(alpha);
    }
    
    &:active { }
    
    &.Button--white {
      border: solid get-color(white);
      border-width: 1px 1px 3px 1px;
      background: none;
      color:  get-color(white);
    }
  }
}

.ButtonBar {
  @include menu-list(inline);
  .Button {
    width: 100%;
  }
  input {
    @include accessible-hide;
  }

  li {
    border-right: 1px solid get-color(alpha, null, dark, map-get($base, shade));
    &:first-child {}
    &:last-child {
      border-right: none;
    }
    input+label {
      background: get-color(grey,null,light, map-get($base, shade) *3);
      margin: 0;
    }
    input:checked+label{ 
      background: get-color(truthy); 
    }
  }
}